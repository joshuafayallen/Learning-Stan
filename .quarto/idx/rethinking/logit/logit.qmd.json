{"title":"Logit in CmdStanr","markdown":{"yaml":{"title":"Logit in CmdStanr","format":"html"},"containsRefs":false,"markdown":"\n\nFor the glms we have to lean a little more on the array syntax to get our work done. \n\n\n```{r}\n\nset.seed(1994)\n\nlibrary(cmdstanr)\nlibrary(tidybayes)\nlibrary(ggdist)\nlibrary(posterior)\nlibrary(tidyverse)\n\ndata(\"chimpanzees\", package = \"rethinking\")\n\nclean_chimp <- chimpanzees |>\n  mutate(\n    treatment = factor(1 + prosoc_left + 2 * condition),\n    labels = factor(\n      treatment,\n      levels = 1:4,\n      labels = c(\"r/n\", \"l/n\", \"r/p\", \"l/p\")\n    )\n  )\n\n```\n\n\nCool lets prep the model. Really anytime we use something that is not a number we can use the array syntax. The `n_variable` pops up in the parameters argument. So you have to marry the `n_variable` with the parameter. \n\n\n\n```{r}\n\npreds_data <- clean_chimp |>\n  distinct(actor, prosoc_left, condition, treatment, labels)\n\nstan_data <- clean_chimp |>\n  select(actor, treatment, pulled_left) |>\n  compose_data(\n    n_actor = n_distinct(actor),\n    n_treatment = n_distinct(treatment),\n    n_pred = nrow(preds_data),\n    pred_actor = preds_data$treatment,\n    pred_treatment = preds_data$treatment\n  )\n\nglm_model <- \"\ndata {\nint <lower=1> n;\nint <lower=1> n_pred;\nint <lower=1> n_treatment;\nint <lower=1> n_actor;\narray[n] int actor;\narray[n] int treatment;\narray[n_pred] int pred_treatment;\narray[n_pred] int pred_actor;\narray[n] int<lower =0, upper=1> pulled_left;\n\n}\n\nparameters {\nvector[n_actor] alpha;\nvector[n_treatment] beta;\n\n}\n\nmodel {\npulled_left ~ binomial(1, inv_logit(alpha[actor] + beta[treatment]));\n\nalpha ~ normal(0, 1.5);\n\nbeta ~ normal(0, 0.5);\n\n}\n\ngenerated quantities {\n\nvector[n] log_lik;\nvector[n_pred] preds;\n\npreds = inv_logit(alpha[pred_actor] + beta[pred_treatment]);\n\nfor(i in 1:n) log_lik[i] = binomial_lpmf(pulled_left[i] | 1, inv_logit(alpha[actor[i]] + beta[treatment[i]]));\n\n\n}\n\n\"\n\nwrite_stan_file(glm_model, dir = \"logit/stan-scripts/\", basename = \"logit-mod\")\n\nlogit_mod <- cmdstan_model(\"logit/stan-scripts/logit-mod.stan\")\n\n\nfitted_mod <- logit_mod$sample(data = stan_data, iter_sampling = 2000)\n\n```\n\n\nOne thing that is worth doing more in vscode is writing the stan file separately because I specified a likelihood that was technically possible to specify but stan threw a lot of warnings. \n\n\n\n```{r}\n\ndraws_logit <- fitted_mod$draws(format = \"df\")\n\n\np2 <- draws_logit |>\n  spread_draws(preds[i]) |>\n  left_join(\n    preds_data |>\n      mutate(i = 1:n()),\n    by = join_by(i)\n  ) |>\n  mutate(actor = str_c(\"actor \", actor), condition = factor(condition)) |>\n  group_by(actor, prosoc_left, condition, treatment, labels) |>\n  mean_qi(preds, .width = 0.89)\n\n\nggplot(p2, aes(x = labels, y = preds)) +\n  geom_line(aes(group = prosoc_left), linewidth = 0.25) +\n  geom_pointinterval(\n    aes(, ymin = .lower, ymax = .upper, fill = condition),\n    linewidth = 1\n  ) +\n  facet_grid(vars(\"Posterior Predicitions\"), vars(actor))\n\n```\n\n\nThis model uses the inv_logit function which will just put things on the probability scale. \n\n\n\n```{r}\nlibrary(brms)\n\np <- c(prior(normal(0, 1.5), nlpar = a), prior(normal(0, 0.5), nlpar = b))\n\n\nex <- brm(\n  bf(\n    pulled_left | trials(1) ~ a + b,\n    a ~ 0 + actor,\n    b ~ 0 + treatment,\n    nl = TRUE\n  ),\n  data = clean_chimp,\n  prior = p,\n  family = binomial(),\n  iter = 2000\n)\n\n```\n\nIf we look at the outputs from the model \n\n\n```{r}\n\ncmd_mod <- fitted_mod$summary(\"beta\") |>\n  as_tibble() |>\n  mutate(API = \"CmdStanr\") |>\n  select(estimate = mean, API, term = variable)\n\nbrms_mod <- broom.mixed::tidy(ex) |>\n  filter(str_detect(term, \"b\")) |>\n  mutate(\n    API = \"Brms\"\n  ) |>\n  select(estimate, API, term) |>\n  bind_rows(cmd_mod)\n\ntinytable::tt(brms_mod)\n\n```\n\n\n\nIf we rescale the parameter we get this \n\n\n\n```{r}\n\nex |>\n  broom.mixed::tidy() |>\n  filter(str_detect(term, \"b\")) |>\n  mutate(estimate = inv_logit_scaled(estimate), API = \"Brms\") |>\n  select(estimate, API, term) |>\n  bind_rows(cmd_mod) |>\n  tinytable::tt()\n\n```\n\n\n\n\n```{r}\ndata(\"UCBadmit\", package = \"rethinking\")\n\nclean_admit <- UCBadmit |>\n  mutate(\n    gid = ifelse(applicant.gender == \"male\", 1, 2),\n    gid = as.factor(gid),\n    case = row_number(),\n    case = as.factor(case)\n  )\n\nstan_admit_data <- clean_admit |>\n  select(dept, gid, admit, applications) |>\n  compose_data()\n\n\nadmissions_mod <- \"\ndata {\nint <lower = 1> n;\nint <lower = 1> n_dept;\nint <lower = 1> n_gid;\narray[n] int gid;\n  array[n] int dept;\n  array[n] int applications;\n  array[n] int<lower=0> admit;\n\n}\n\nparameters {\nvector[n_gid] alpha;\nvector[n_dept] beta;\n\n}\nmodel {\n\nadmit ~ binomial(applications, inv_logit(alpha[gid] + beta[dept]));\n\ngid ~ normal(0, 1.5);\n\ndept ~ normal(0, 1.5);\n\n\n}\n\n\n\"\n\nwrite_stan_file(\n  admissions_mod,\n  \"logit/stan-scripts/\",\n  basename = \"admissions-mod\"\n)\n\nad_mod <- cmdstan_model(\"logit/stan-scripts/admissions-mod.stan\")\n\nfitted_ad_mod <- ad_mod$sample(\n  data = stan_admit_data,\n  iter_sampling = 4000\n)\n\n```","srcMarkdownNoYaml":"\n\nFor the glms we have to lean a little more on the array syntax to get our work done. \n\n\n```{r}\n\nset.seed(1994)\n\nlibrary(cmdstanr)\nlibrary(tidybayes)\nlibrary(ggdist)\nlibrary(posterior)\nlibrary(tidyverse)\n\ndata(\"chimpanzees\", package = \"rethinking\")\n\nclean_chimp <- chimpanzees |>\n  mutate(\n    treatment = factor(1 + prosoc_left + 2 * condition),\n    labels = factor(\n      treatment,\n      levels = 1:4,\n      labels = c(\"r/n\", \"l/n\", \"r/p\", \"l/p\")\n    )\n  )\n\n```\n\n\nCool lets prep the model. Really anytime we use something that is not a number we can use the array syntax. The `n_variable` pops up in the parameters argument. So you have to marry the `n_variable` with the parameter. \n\n\n\n```{r}\n\npreds_data <- clean_chimp |>\n  distinct(actor, prosoc_left, condition, treatment, labels)\n\nstan_data <- clean_chimp |>\n  select(actor, treatment, pulled_left) |>\n  compose_data(\n    n_actor = n_distinct(actor),\n    n_treatment = n_distinct(treatment),\n    n_pred = nrow(preds_data),\n    pred_actor = preds_data$treatment,\n    pred_treatment = preds_data$treatment\n  )\n\nglm_model <- \"\ndata {\nint <lower=1> n;\nint <lower=1> n_pred;\nint <lower=1> n_treatment;\nint <lower=1> n_actor;\narray[n] int actor;\narray[n] int treatment;\narray[n_pred] int pred_treatment;\narray[n_pred] int pred_actor;\narray[n] int<lower =0, upper=1> pulled_left;\n\n}\n\nparameters {\nvector[n_actor] alpha;\nvector[n_treatment] beta;\n\n}\n\nmodel {\npulled_left ~ binomial(1, inv_logit(alpha[actor] + beta[treatment]));\n\nalpha ~ normal(0, 1.5);\n\nbeta ~ normal(0, 0.5);\n\n}\n\ngenerated quantities {\n\nvector[n] log_lik;\nvector[n_pred] preds;\n\npreds = inv_logit(alpha[pred_actor] + beta[pred_treatment]);\n\nfor(i in 1:n) log_lik[i] = binomial_lpmf(pulled_left[i] | 1, inv_logit(alpha[actor[i]] + beta[treatment[i]]));\n\n\n}\n\n\"\n\nwrite_stan_file(glm_model, dir = \"logit/stan-scripts/\", basename = \"logit-mod\")\n\nlogit_mod <- cmdstan_model(\"logit/stan-scripts/logit-mod.stan\")\n\n\nfitted_mod <- logit_mod$sample(data = stan_data, iter_sampling = 2000)\n\n```\n\n\nOne thing that is worth doing more in vscode is writing the stan file separately because I specified a likelihood that was technically possible to specify but stan threw a lot of warnings. \n\n\n\n```{r}\n\ndraws_logit <- fitted_mod$draws(format = \"df\")\n\n\np2 <- draws_logit |>\n  spread_draws(preds[i]) |>\n  left_join(\n    preds_data |>\n      mutate(i = 1:n()),\n    by = join_by(i)\n  ) |>\n  mutate(actor = str_c(\"actor \", actor), condition = factor(condition)) |>\n  group_by(actor, prosoc_left, condition, treatment, labels) |>\n  mean_qi(preds, .width = 0.89)\n\n\nggplot(p2, aes(x = labels, y = preds)) +\n  geom_line(aes(group = prosoc_left), linewidth = 0.25) +\n  geom_pointinterval(\n    aes(, ymin = .lower, ymax = .upper, fill = condition),\n    linewidth = 1\n  ) +\n  facet_grid(vars(\"Posterior Predicitions\"), vars(actor))\n\n```\n\n\nThis model uses the inv_logit function which will just put things on the probability scale. \n\n\n\n```{r}\nlibrary(brms)\n\np <- c(prior(normal(0, 1.5), nlpar = a), prior(normal(0, 0.5), nlpar = b))\n\n\nex <- brm(\n  bf(\n    pulled_left | trials(1) ~ a + b,\n    a ~ 0 + actor,\n    b ~ 0 + treatment,\n    nl = TRUE\n  ),\n  data = clean_chimp,\n  prior = p,\n  family = binomial(),\n  iter = 2000\n)\n\n```\n\nIf we look at the outputs from the model \n\n\n```{r}\n\ncmd_mod <- fitted_mod$summary(\"beta\") |>\n  as_tibble() |>\n  mutate(API = \"CmdStanr\") |>\n  select(estimate = mean, API, term = variable)\n\nbrms_mod <- broom.mixed::tidy(ex) |>\n  filter(str_detect(term, \"b\")) |>\n  mutate(\n    API = \"Brms\"\n  ) |>\n  select(estimate, API, term) |>\n  bind_rows(cmd_mod)\n\ntinytable::tt(brms_mod)\n\n```\n\n\n\nIf we rescale the parameter we get this \n\n\n\n```{r}\n\nex |>\n  broom.mixed::tidy() |>\n  filter(str_detect(term, \"b\")) |>\n  mutate(estimate = inv_logit_scaled(estimate), API = \"Brms\") |>\n  select(estimate, API, term) |>\n  bind_rows(cmd_mod) |>\n  tinytable::tt()\n\n```\n\n\n\n\n```{r}\ndata(\"UCBadmit\", package = \"rethinking\")\n\nclean_admit <- UCBadmit |>\n  mutate(\n    gid = ifelse(applicant.gender == \"male\", 1, 2),\n    gid = as.factor(gid),\n    case = row_number(),\n    case = as.factor(case)\n  )\n\nstan_admit_data <- clean_admit |>\n  select(dept, gid, admit, applications) |>\n  compose_data()\n\n\nadmissions_mod <- \"\ndata {\nint <lower = 1> n;\nint <lower = 1> n_dept;\nint <lower = 1> n_gid;\narray[n] int gid;\n  array[n] int dept;\n  array[n] int applications;\n  array[n] int<lower=0> admit;\n\n}\n\nparameters {\nvector[n_gid] alpha;\nvector[n_dept] beta;\n\n}\nmodel {\n\nadmit ~ binomial(applications, inv_logit(alpha[gid] + beta[dept]));\n\ngid ~ normal(0, 1.5);\n\ndept ~ normal(0, 1.5);\n\n\n}\n\n\n\"\n\nwrite_stan_file(\n  admissions_mod,\n  \"logit/stan-scripts/\",\n  basename = \"admissions-mod\"\n)\n\nad_mod <- cmdstan_model(\"logit/stan-scripts/admissions-mod.stan\")\n\nfitted_ad_mod <- ad_mod$sample(\n  data = stan_admit_data,\n  iter_sampling = 4000\n)\n\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"logit.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.22","knitr":{"opts_chunk":{"results":"hide"}},"theme":["cosmo","brand"],"title":"Logit in CmdStanr"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}