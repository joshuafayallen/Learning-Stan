{
  "hash": "6bb04158769af881e8446648a3a67ea8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Logit in CmdStanr\"\nformat: html\n---\n\nFor the glms we have to lean a little more on the array syntax to get our work done. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1994)\n\nlibrary(cmdstanr)\nlibrary(tidybayes)\nlibrary(ggdist)\nlibrary(posterior)\nlibrary(tidyverse)\n\ndata(\"chimpanzees\", package = \"rethinking\")\n\nclean_chimp <- chimpanzees |>\n  mutate(\n    treatment = factor(1 + prosoc_left + 2 * condition),\n    labels = factor(\n      treatment,\n      levels = 1:4,\n      labels = c(\"r/n\", \"l/n\", \"r/p\", \"l/p\")\n    )\n  )\n```\n:::\n\n\n\nCool lets prep the model. Really anytime we use something that is not a number we can use the array syntax. The `n_variable` pops up in the parameters argument. So you have to marry the `n_variable` with the parameter. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds_data <- clean_chimp |>\n  distinct(actor, prosoc_left, condition, treatment, labels)\n\nstan_data <- clean_chimp |>\n  select(actor, treatment, pulled_left) |>\n  compose_data(\n    n_actor = n_distinct(actor),\n    n_treatment = n_distinct(treatment),\n    n_pred = nrow(preds_data),\n    pred_actor = preds_data$treatment,\n    pred_treatment = preds_data$treatment\n  )\n\nglm_model <- \"\ndata {\nint <lower=1> n;\nint <lower=1> n_pred;\nint <lower=1> n_treatment;\nint <lower=1> n_actor;\narray[n] int actor;\narray[n] int treatment;\narray[n_pred] int pred_treatment;\narray[n_pred] int pred_actor;\narray[n] int<lower =0, upper=1> pulled_left;\n\n}\n\nparameters {\nvector[n_actor] alpha;\nvector[n_treatment] beta;\n\n}\n\nmodel {\npulled_left ~ binomial(1, inv_logit(alpha[actor] + beta[treatment]));\n\nalpha ~ normal(0, 1.5);\n\nbeta ~ normal(0, 0.5);\n\n}\n\ngenerated quantities {\n\nvector[n] log_lik;\nvector[n_pred] preds;\n\npreds = inv_logit(alpha[pred_actor] + beta[pred_treatment]);\n\nfor(i in 1:n) log_lik[i] = binomial_lpmf(pulled_left[i] | 1, inv_logit(alpha[actor[i]] + beta[treatment[i]]));\n\n\n}\n\n\"\n\nwrite_stan_file(glm_model, dir = \"logit/stan-scripts/\", basename = \"logit-mod\")\n\nlogit_mod <- cmdstan_model(\"logit/stan-scripts/logit-mod.stan\")\n\n\nfitted_mod <- logit_mod$sample(data = stan_data, iter_sampling = 2000)\n```\n:::\n\n\n\nOne thing that is worth doing more in vscode is writing the stan file separately because I specified a likelihood that was technically possible to specify but stan threw a lot of warnings. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraws_logit <- fitted_mod$draws(format = \"df\")\n\n\np2 <- draws_logit |>\n  spread_draws(preds[i]) |>\n  left_join(\n    preds_data |>\n      mutate(i = 1:n()),\n    by = join_by(i)\n  ) |>\n  mutate(actor = str_c(\"actor \", actor), condition = factor(condition)) |>\n  group_by(actor, prosoc_left, condition, treatment, labels) |>\n  mean_qi(preds, .width = 0.89)\n\n\nggplot(p2, aes(x = labels, y = preds)) +\n  geom_line(aes(group = prosoc_left), linewidth = 0.25) +\n  geom_pointinterval(\n    aes(, ymin = .lower, ymax = .upper, fill = condition),\n    linewidth = 1\n  ) +\n  facet_grid(vars(\"Posterior Predicitions\"), vars(actor))\n```\n\n::: {.cell-output-display}\n![](logit_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nThis model uses the inv_logit function which will just put things on the probability scale. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brms)\n\np <- c(prior(normal(0, 1.5), nlpar = a), prior(normal(0, 0.5), nlpar = b))\n\n\nex <- brm(\n  bf(\n    pulled_left | trials(1) ~ a + b,\n    a ~ 0 + actor,\n    b ~ 0 + treatment,\n    nl = TRUE\n  ),\n  data = clean_chimp,\n  prior = p,\n  family = binomial(),\n  iter = 2000\n)\n```\n:::\n\n\nIf we look at the outputs from the model \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmd_mod <- fitted_mod$summary(\"beta\") |>\n  as_tibble() |>\n  mutate(API = \"CmdStanr\") |>\n  select(estimate = mean, API, term = variable)\n\nbrms_mod <- broom.mixed::tidy(ex) |>\n  filter(str_detect(term, \"b\")) |>\n  mutate(\n    API = \"Brms\"\n  ) |>\n  select(estimate, API, term) |>\n  bind_rows(cmd_mod)\n\ntinytable::tt(brms_mod)\n```\n:::\n\n\n\n\nIf we rescale the parameter we get this \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nex |>\n  broom.mixed::tidy() |>\n  filter(str_detect(term, \"b\")) |>\n  mutate(estimate = inv_logit_scaled(estimate), API = \"Brms\") |>\n  select(estimate, API, term) |>\n  bind_rows(cmd_mod) |>\n  tinytable::tt()\n```\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"UCBadmit\", package = \"rethinking\")\n\nclean_admit <- UCBadmit |>\n  mutate(\n    gid = ifelse(applicant.gender == \"male\", 1, 2),\n    gid = as.factor(gid),\n    case = row_number(),\n    case = as.factor(case)\n  )\n\nstan_admit_data <- clean_admit |>\n  select(dept, gid, admit, applications) |>\n  compose_data()\n\n\nadmissions_mod <- \"\ndata {\nint <lower = 1> n;\nint <lower = 1> n_dept;\nint <lower = 1> n_gid;\narray[n] int gid;\n  array[n] int dept;\n  array[n] int applications;\n  array[n] int<lower=0> admit;\n\n}\n\nparameters {\nvector[n_gid] alpha;\nvector[n_dept] beta;\n\n}\nmodel {\n\nadmit ~ binomial(applications, inv_logit(alpha[gid] + beta[dept]));\n\ngid ~ normal(0, 1.5);\n\ndept ~ normal(0, 1.5);\n\n\n}\n\n\n\"\n\nwrite_stan_file(\n  admissions_mod,\n  \"logit/stan-scripts/\",\n  basename = \"admissions-mod\"\n)\n\nad_mod <- cmdstan_model(\"logit/stan-scripts/admissions-mod.stan\")\n\nfitted_ad_mod <- ad_mod$sample(\n  data = stan_admit_data,\n  iter_sampling = 4000\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}